// <auto-generated />
using System;
using EFCoreIsitech.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCoreIsitech.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250407125329_UpdateDataModels")]
    partial class UpdateDataModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EFCoreIsitech.Data.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId", "Type", "IsDefault");

                    b.ToTable("Addresses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Anytown",
                            Country = "USA",
                            CustomerId = 1,
                            IsDefault = true,
                            PostalCode = "12345",
                            State = "AN",
                            Street = "123 Main St",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            City = "Anytown",
                            Country = "USA",
                            CustomerId = 1,
                            IsDefault = true,
                            PostalCode = "12345",
                            State = "AN",
                            Street = "123 Main St",
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            City = "Somewhere",
                            Country = "USA",
                            CustomerId = 2,
                            IsDefault = true,
                            PostalCode = "67890",
                            State = "SW",
                            Street = "456 Oak Ave",
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            City = "Somewhere",
                            Country = "USA",
                            CustomerId = 2,
                            IsDefault = true,
                            PostalCode = "67890",
                            State = "SW",
                            Street = "456 Oak Ave",
                            Type = 1
                        });
                });

            modelBuilder.Entity("EFCoreIsitech.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("IconUrl")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasFilter("Slug IS NOT NULL");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Electronic devices and accessories",
                            IsActive = true,
                            Name = "Electronics",
                            Slug = "electronics",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Apparel and fashion items",
                            IsActive = true,
                            Name = "Clothing",
                            Slug = "clothing",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Books and publications",
                            IsActive = true,
                            Name = "Books",
                            Slug = "books",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Mobile phones and accessories",
                            IsActive = true,
                            Name = "Smartphones",
                            ParentCategoryId = 1,
                            Slug = "smartphones",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "Notebook computers",
                            IsActive = true,
                            Name = "Laptops",
                            ParentCategoryId = 1,
                            Slug = "laptops",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 6,
                            Description = "Men's clothing",
                            IsActive = true,
                            Name = "Men's",
                            ParentCategoryId = 2,
                            Slug = "mens",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 7,
                            Description = "Women's clothing",
                            IsActive = true,
                            Name = "Women's",
                            ParentCategoryId = 2,
                            Slug = "womens",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 8,
                            Description = "Fictional literature",
                            IsActive = true,
                            Name = "Fiction",
                            ParentCategoryId = 3,
                            Slug = "fiction",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 9,
                            Description = "Non-fictional literature",
                            IsActive = true,
                            Name = "Non-Fiction",
                            ParentCategoryId = 3,
                            Slug = "non-fiction",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 10,
                            Description = "Android smartphones",
                            IsActive = true,
                            Name = "Android",
                            ParentCategoryId = 4,
                            Slug = "android",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 11,
                            Description = "Apple iOS smartphones",
                            IsActive = true,
                            Name = "iOS",
                            ParentCategoryId = 4,
                            Slug = "ios",
                            SortOrder = 2
                        });
                });

            modelBuilder.Entity("EFCoreIsitech.Data.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Phone = "555-123-4567"
                        },
                        new
                        {
                            Id = 2,
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Phone = "555-987-6543"
                        });
                });

            modelBuilder.Entity("EFCoreIsitech.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderDate");

                    b.ToTable("Orders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            OrderDate = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Delivered",
                            TotalAmount = 624.98m
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            OrderDate = new DateTime(2025, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Shipped",
                            TotalAmount = 1299.99m
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 1,
                            OrderDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Processing",
                            TotalAmount = 74.98m
                        });
                });

            modelBuilder.Entity("EFCoreIsitech.Data.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("OrderId", "ProductId");

                    b.ToTable("OrderItems", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 1,
                            UnitPrice = 599.99m
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 1,
                            ProductId = 4,
                            Quantity = 1,
                            UnitPrice = 24.99m
                        },
                        new
                        {
                            Id = 3,
                            OrderId = 2,
                            ProductId = 2,
                            Quantity = 1,
                            UnitPrice = 1299.99m
                        },
                        new
                        {
                            Id = 4,
                            OrderId = 3,
                            ProductId = 3,
                            Quantity = 2,
                            UnitPrice = 14.99m
                        },
                        new
                        {
                            Id = 5,
                            OrderId = 3,
                            ProductId = 4,
                            Quantity = 2,
                            UnitPrice = 24.99m
                        });
                });

            modelBuilder.Entity("EFCoreIsitech.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name");

                    b.HasIndex("Price");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 4,
                            Description = "The latest smartphone with advanced features",
                            ImageUrl = "/images/products/smartphone-xyz.jpg",
                            IsAvailable = true,
                            Name = "Smartphone XYZ",
                            Price = 599.99m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 5,
                            Description = "High-performance laptop for professionals",
                            ImageUrl = "/images/products/laptop-pro.jpg",
                            IsAvailable = true,
                            Name = "Laptop Pro",
                            Price = 1299.99m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 8,
                            Description = "A timeless classic novel",
                            ImageUrl = "/images/products/classic-novel.jpg",
                            IsAvailable = true,
                            Name = "Classic Novel",
                            Price = 14.99m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 6,
                            Description = "Comfortable cotton t-shirt",
                            ImageUrl = "/images/products/mens-tshirt.jpg",
                            IsAvailable = true,
                            Name = "Men's T-Shirt",
                            Price = 24.99m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 7,
                            Description = "Elegant dress for any occasion",
                            ImageUrl = "/images/products/womens-dress.jpg",
                            IsAvailable = true,
                            Name = "Women's Dress",
                            Price = 49.99m
                        });
                });

            modelBuilder.Entity("EFCoreIsitech.Data.Models.ProductInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastCountDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastRestockDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.Property<int?>("ReorderThreshold")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("SKU")
                        .IsUnique()
                        .HasFilter("SKU IS NOT NULL");

                    b.ToTable("ProductInventories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            LastCountDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastRestockDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Warehouse A, Shelf B3",
                            ProductId = 1,
                            QuantityInStock = 100,
                            ReorderThreshold = 10,
                            SKU = "PRD-001"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            LastCountDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastRestockDate = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Warehouse A, Shelf C4",
                            ProductId = 2,
                            QuantityInStock = 50,
                            ReorderThreshold = 5,
                            SKU = "PRD-002"
                        });
                });

            modelBuilder.Entity("EFCoreIsitech.Data.Models.ProductPriceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ChangedBy")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("EffectiveDate");

                    b.HasIndex("ProductId", "EffectiveDate");

                    b.ToTable("ProductPriceHistories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChangedBy = "System",
                            EffectiveDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2025, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 19.99m,
                            ProductId = 1,
                            Reason = "Initial price"
                        },
                        new
                        {
                            Id = 2,
                            ChangedBy = "Admin",
                            EffectiveDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 24.99m,
                            ProductId = 1,
                            Reason = "Price increase due to high demand"
                        },
                        new
                        {
                            Id = 3,
                            ChangedBy = "System",
                            EffectiveDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 29.99m,
                            ProductId = 2,
                            Reason = "Initial price"
                        });
                });

            modelBuilder.Entity("EFCoreIsitech.Data.Models.ProductRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("HelpfulVotes")
                        .HasColumnType("int");

                    b.Property<bool>("IsVerifiedPurchase")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("Rating");

                    b.HasIndex("CustomerId", "ProductId")
                        .IsUnique();

                    b.ToTable("ProductRatings", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1,
                            HelpfulVotes = 3,
                            IsVerifiedPurchase = true,
                            ProductId = 1,
                            Rating = 5,
                            Review = "Excellent product, very satisfied with my purchase!"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 2,
                            HelpfulVotes = 1,
                            IsVerifiedPurchase = true,
                            ProductId = 1,
                            Rating = 4,
                            Review = "Good quality but a bit expensive."
                        });
                });

            modelBuilder.Entity("EFCoreIsitech.Data.Models.Address", b =>
                {
                    b.HasOne("EFCoreIsitech.Data.Models.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("EFCoreIsitech.Data.Models.Category", b =>
                {
                    b.HasOne("EFCoreIsitech.Data.Models.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("EFCoreIsitech.Data.Models.Order", b =>
                {
                    b.HasOne("EFCoreIsitech.Data.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("EFCoreIsitech.Data.Models.OrderItem", b =>
                {
                    b.HasOne("EFCoreIsitech.Data.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreIsitech.Data.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EFCoreIsitech.Data.Models.Product", b =>
                {
                    b.HasOne("EFCoreIsitech.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EFCoreIsitech.Data.Models.ProductInventory", b =>
                {
                    b.HasOne("EFCoreIsitech.Data.Models.Product", "Product")
                        .WithOne("Inventory")
                        .HasForeignKey("EFCoreIsitech.Data.Models.ProductInventory", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EFCoreIsitech.Data.Models.ProductPriceHistory", b =>
                {
                    b.HasOne("EFCoreIsitech.Data.Models.Product", "Product")
                        .WithMany("PriceHistory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EFCoreIsitech.Data.Models.ProductRating", b =>
                {
                    b.HasOne("EFCoreIsitech.Data.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EFCoreIsitech.Data.Models.Product", "Product")
                        .WithMany("Ratings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EFCoreIsitech.Data.Models.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("EFCoreIsitech.Data.Models.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EFCoreIsitech.Data.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("EFCoreIsitech.Data.Models.Product", b =>
                {
                    b.Navigation("Inventory");

                    b.Navigation("OrderItems");

                    b.Navigation("PriceHistory");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
